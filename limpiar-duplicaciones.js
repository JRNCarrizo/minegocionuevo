// Script para limpiar duplicaciones de stock por sector
// Ejecutar despu√©s de que el backend est√© iniciado

const limpiarDuplicaciones = async () => {
  try {
    console.log('üîç Iniciando limpieza de duplicaciones...');
    
    // Obtener el token del localStorage (si est√°s en el navegador)
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('‚ùå No se encontr√≥ token de autenticaci√≥n');
      return;
    }
    
    // Obtener el ID de la empresa del localStorage
    const datosUsuario = JSON.parse(localStorage.getItem('datosUsuario') || '{}');
    const empresaId = datosUsuario.empresaId;
    
    if (!empresaId) {
      console.error('‚ùå No se encontr√≥ ID de empresa');
      return;
    }
    
    console.log('üîç Empresa ID:', empresaId);
    
    // Ejecutar la limpieza
    const response = await fetch(`/api/empresas/${empresaId}/sectores/limpiar-duplicaciones`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Limpieza completada:', data);
      alert('‚úÖ Duplicaciones limpiadas exitosamente');
    } else {
      const errorData = await response.json();
      console.error('‚ùå Error en la limpieza:', errorData);
      alert('‚ùå Error al limpiar duplicaciones: ' + errorData.error);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    alert('‚ùå Error de conexi√≥n: ' + error.message);
  }
};

// Ejecutar la limpieza
limpiarDuplicaciones();
