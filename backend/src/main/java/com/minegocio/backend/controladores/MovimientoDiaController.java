package com.minegocio.backend.controladores;

import com.minegocio.backend.dto.MovimientoDiaDTO;
import com.minegocio.backend.servicios.MovimientoDiaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import java.util.Map;

@RestController
@RequestMapping("/api/movimientos-dia")
@CrossOrigin(origins = "*")
public class MovimientoDiaController {
    
    @Autowired
    private MovimientoDiaService movimientoDiaService;
    
    /**
     * Obtener movimientos del d√≠a para una fecha espec√≠fica
     */
    @GetMapping("/{fecha}")
    public ResponseEntity<MovimientoDiaDTO> obtenerMovimientosDia(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Obteniendo movimientos para fecha: " + fecha);
            MovimientoDiaDTO movimientos = movimientoDiaService.obtenerMovimientosDia(fecha);
            return ResponseEntity.ok(movimientos);
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al obtener movimientos: " + e.getMessage());
            System.err.println("‚ùå [CONTROLLER] Fecha recibida: " + fecha);
            System.err.println("‚ùå [CONTROLLER] Stack trace completo:");
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Obtener movimientos acumulados por rango de fechas
     */
    @GetMapping("/rango")
    public ResponseEntity<MovimientoDiaDTO> obtenerMovimientosRango(
            @RequestParam String fechaInicio,
            @RequestParam String fechaFin) {
        try {
            System.out.println("üîç [CONTROLLER] Obteniendo movimientos para rango: " + fechaInicio + " a " + fechaFin);
            MovimientoDiaDTO movimientos = movimientoDiaService.obtenerMovimientosRango(fechaInicio, fechaFin);
            return ResponseEntity.ok(movimientos);
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al obtener movimientos por rango: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Exportar movimientos del d√≠a a Excel
     */
    @GetMapping("/{fecha}/exportar-excel")
    public ResponseEntity<byte[]> exportarMovimientosDiaExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando movimientos a Excel para fecha: " + fecha);
            byte[] excelBytes = movimientoDiaService.exportarMovimientosDiaExcel(fecha);
            
            String nombreArchivo = "movimientos_dia_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar movimientos a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Exportar movimientos por rango de fechas a Excel
     */
    @GetMapping("/rango/exportar-excel")
    public ResponseEntity<byte[]> exportarMovimientosRangoExcel(
            @RequestParam String fechaInicio,
            @RequestParam String fechaFin) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando movimientos a Excel para rango: " + fechaInicio + " a " + fechaFin);
            byte[] excelBytes = movimientoDiaService.exportarMovimientosRangoExcel(fechaInicio, fechaFin);
            
            String nombreArchivo = "movimientos_rango_" + fechaInicio + "_a_" + fechaFin + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel de rango exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar movimientos de rango a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Exportar ingresos del d√≠a a Excel con estructura espec√≠fica
     * Incluye: c√≥digo personalizado, productos iniciales, cantidades, remitos por d√≠a
     */
    @GetMapping("/{fecha}/exportar-ingresos-excel")
    public ResponseEntity<byte[]> exportarIngresosDiaExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando ingresos a Excel para fecha: " + fecha);
            byte[] excelBytes = movimientoDiaService.exportarIngresosDiaExcel(fecha);
            
            String nombreArchivo = "ingresos_dia_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel de ingresos exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar ingresos a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Exportar planillas del d√≠a a Excel con estructura espec√≠fica
     * Incluye: c√≥digo personalizado, productos, cantidades, planillas por d√≠a
     */
    @GetMapping("/{fecha}/exportar-planillas-excel")
    public ResponseEntity<byte[]> exportarPlanillasDiaExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando planillas a Excel para fecha: " + fecha);
            byte[] excelBytes = movimientoDiaService.exportarPlanillasDiaExcel(fecha);
            
            String nombreArchivo = "planillas_dia_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel de planillas exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar planillas a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Exportar devoluciones del d√≠a a Excel con estructura espec√≠fica
     * Incluye: c√≥digo personalizado, productos, cantidades, planillas de devoluci√≥n por d√≠a
     */
    @GetMapping("/{fecha}/exportar-devoluciones-excel")
    public ResponseEntity<byte[]> exportarDevolucionesDiaExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando devoluciones a Excel para fecha: " + fecha);
            byte[] excelBytes = movimientoDiaService.exportarDevolucionesDiaExcel(fecha);
            
            String nombreArchivo = "devoluciones_dia_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel de devoluciones exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar devoluciones a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Exportar stock inicial del d√≠a a Excel
     * Incluye: c√≥digo personalizado, descripci√≥n, cantidad inicial, total
     */
    @GetMapping("/{fecha}/exportar-stock-inicial-excel")
    public ResponseEntity<byte[]> exportarStockInicialExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando stock inicial a Excel para fecha: " + fecha);
            
            // Validar formato de fecha
            if (fecha == null || fecha.trim().isEmpty()) {
                System.err.println("‚ùå [CONTROLLER] Fecha vac√≠a o nula");
                return ResponseEntity.badRequest().build();
            }
            
            byte[] excelBytes = movimientoDiaService.exportarStockInicialExcel(fecha);
            
            if (excelBytes == null || excelBytes.length == 0) {
                System.err.println("‚ùå [CONTROLLER] Excel generado est√° vac√≠o");
                return ResponseEntity.badRequest().build();
            }
            
            String nombreArchivo = "stock_inicial_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Excel de stock inicial exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar stock inicial a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * Obtener productos perdidos del d√≠a (ROTO, MAL_ESTADO, DEFECTUOSO)
     */
    @GetMapping("/{fecha}/productos-perdidos")
    public ResponseEntity<?> obtenerProductosPerdidos(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Obteniendo productos perdidos para fecha: " + fecha);
            var productosPerdidos = movimientoDiaService.obtenerProductosPerdidos(fecha);
            return ResponseEntity.ok(productosPerdidos);
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al obtener productos perdidos: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Limpiar cache del stock inicial (√∫til para testing o reinicio del d√≠a)
     */
    @PostMapping("/limpiar-cache-stock-inicial")
    public ResponseEntity<String> limpiarCacheStockInicial() {
        try {
            System.out.println("üîç [CONTROLLER] Limpiando cache del stock inicial");
            movimientoDiaService.limpiarCacheStockInicial();
            return ResponseEntity.ok("Cache del stock inicial limpiado exitosamente");
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al limpiar cache del stock inicial: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("Error al limpiar cache del stock inicial");
        }
    }

    /**
     * Debug: Obtener informaci√≥n detallada del stock para una fecha espec√≠fica
     */
    @GetMapping("/debug/{fecha}")
    public ResponseEntity<Map<String, Object>> debugStock(@PathVariable String fecha) {
        try {
            System.out.println("üîç [DEBUG] Obteniendo informaci√≥n de debug para fecha: " + fecha);
            Map<String, Object> debug = movimientoDiaService.debugStock(fecha);
            return ResponseEntity.ok(debug);
        } catch (Exception e) {
            System.err.println("‚ùå [DEBUG] Error al obtener informaci√≥n de debug: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Cerrar o reabrir el d√≠a
     * Si est√° abierto: lo cierra y guarda el balance final
     * Si est√° cerrado: lo reabre eliminando el cierre
     */
    @PostMapping("/cerrar-dia/{fecha}")
    public ResponseEntity<String> cerrarDia(@PathVariable String fecha) {
        try {
            System.out.println("üîí [CONTROLLER] Procesando d√≠a para fecha: " + fecha);
            
            // Validar formato de fecha
            if (fecha == null || fecha.trim().isEmpty()) {
                return ResponseEntity.badRequest().body("Fecha requerida");
            }
            
            String resultado = movimientoDiaService.cerrarDia(fecha);
            
            System.out.println("‚úÖ [CONTROLLER] D√≠a procesado exitosamente: " + resultado);
            return ResponseEntity.ok(resultado);
            
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al procesar el d√≠a: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("Error al procesar el d√≠a: " + e.getMessage());
        }
    }

    /**
     * Ejecutar migraci√≥n V36 para agregar columna estado a planillas_devoluciones
     * SOLO PARA USAR EN PRODUCCI√ìN - Ejecutar una sola vez
     */
    @PostMapping("/ejecutar-migracion-v36")
    public ResponseEntity<String> ejecutarMigracionV36() {
        try {
            System.out.println("üîß [MIGRACI√ìN] Iniciando ejecuci√≥n de migraci√≥n V36...");
            
            // Ejecutar la migraci√≥n V36
            String resultado = movimientoDiaService.ejecutarMigracionV36();
            
            System.out.println("‚úÖ [MIGRACI√ìN] Migraci√≥n V36 ejecutada exitosamente");
            return ResponseEntity.ok("‚úÖ Migraci√≥n V36 ejecutada exitosamente: " + resultado);
            
        } catch (Exception e) {
            System.err.println("‚ùå [MIGRACI√ìN] Error al ejecutar migraci√≥n V36: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå Error al ejecutar migraci√≥n V36: " + e.getMessage());
        }
    }

    /**
     * Capturar manualmente el stock inicial para una fecha espec√≠fica
     */
    @PostMapping("/capturar-stock-inicial/{fecha}")
    public ResponseEntity<String> capturarStockInicial(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Capturando stock inicial para fecha: " + fecha);
            
            // Validar formato de fecha
            if (fecha == null || fecha.trim().isEmpty()) {
                return ResponseEntity.badRequest().body("Fecha requerida");
            }
            
            // Convertir string a LocalDate
            java.time.LocalDate fechaLocal = java.time.LocalDate.parse(fecha, java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            
            // Capturar stock inicial
            movimientoDiaService.capturarStockInicialParaFecha(fechaLocal);
            
            return ResponseEntity.ok("Stock inicial capturado exitosamente para la fecha: " + fecha);
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al capturar stock inicial: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("Error al capturar stock inicial: " + e.getMessage());
        }
    }

    /**
     * Exportar reporte completo del d√≠a a Excel con 5 pesta√±as
     * Pesta√±as: Ingresos, Planillas, Retornos, P√©rdidas, Stock
     */
    @GetMapping("/{fecha}/exportar-reporte-completo-excel")
    public ResponseEntity<byte[]> exportarReporteCompletoExcel(@PathVariable String fecha) {
        try {
            System.out.println("üîç [CONTROLLER] Exportando reporte completo a Excel para fecha: " + fecha);
            
            // Validar formato de fecha
            if (fecha == null || fecha.trim().isEmpty()) {
                System.err.println("‚ùå [CONTROLLER] Fecha vac√≠a o nula");
                return ResponseEntity.badRequest().build();
            }
            
            byte[] excelBytes = movimientoDiaService.exportarReporteCompletoExcel(fecha);
            
            if (excelBytes == null || excelBytes.length == 0) {
                System.err.println("‚ùå [CONTROLLER] Excel generado est√° vac√≠o");
                return ResponseEntity.badRequest().build();
            }
            
            String nombreArchivo = "reporte_completo_" + fecha + ".xlsx";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", nombreArchivo);
            headers.setContentLength(excelBytes.length);
            
            System.out.println("‚úÖ [CONTROLLER] Reporte completo exportado exitosamente. Tama√±o: " + excelBytes.length + " bytes");
            
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(excelBytes);
                    
        } catch (Exception e) {
            System.err.println("‚ùå [CONTROLLER] Error al exportar reporte completo a Excel: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

}
